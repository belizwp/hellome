stages:
  - build
#  - package
#  - migrate
#  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://localhost:2375
  DOCKER_TLS_CERTDIR: ""

  REGISTRY: asia.gcr.io
  REGISTRY_HOST: https://asia.gcr.io

before_script:
  - APP_VERSION=`grep 'version' ./conf/application.conf | cut -d '"' -f2`
  - REGISTRY_IMAGE="$CI_REGISTRY_IMAGE:${APP_VERSION}"

build:
  stage: build
  image: hseeberger/scala-sbt:8u222_1.3.4_2.13.1
  variables:
    SBT_VERSION: "1.3.4"
    SBT_OPTS: "-Dsbt.global.base=sbt-cache/.sbtboot -Dsbt.boot.directory=sbt-cache/.boot -Dsbt.ivy.home=sbt-cache/.ivy"
  cache:
#    key: "$CI_BUILD_REF_NAME" # contains either the branch or the tag, so it's caching per branch x
    untracked: true
    paths:
      - "sbt-cache/.ivy/cache"
      - "sbt-cache/.boot"
      - "sbt-cache/.sbtboot"
      - "sbt-cache/target"
  script:
    - sbt compile dist --supershell=false
  artifacts:
    paths:
      - target/universal/

#docker-build:
#  stage: package
#  image: docker:stable
#  services:
#    - docker:dind
#  script:
#    - docker login -u _json_key --password-stdin custom_host < ${HOME}/gcloud-service-key.json
#    - docker build -t $REGISTRY_IMAGE .
#    - docker push $REGISTRY_IMAGE
#
#docker-build:
#  stage: package
#  image: docker:stable
#  services:
#    - docker:dind
#  script:
#    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
#    - docker build -t $REGISTRY_IMAGE .
#    - docker push $REGISTRY_IMAGE
#
#database-migrate:
#  stage: migrate
#  image: docker:stable
#  services:
#    - docker:dind
#  variables:
#    FLYWAY_EDITION: community
#  script:
#    - docker pull flyway/flyway
#    - docker run --rm -v ${PWD}/sql:/flyway/sql flyway/flyway -url=jdbc:postgresql://35.240.216.222:5432/test-db -user=gitlab-ci -password=123456 -baselineOnMigrate=true migrate
#
#deploy:
#  stage: deploy
#  image: google/cloud-sdk:latest
#  script:
#    - echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-k8s-key.json
#    - gcloud auth activate-service-account --key-file ${HOME}/gcloud-k8s-key.json
#    - gcloud container clusters get-credentials $GKE_CLUSTER_NAME --zone $GKE_CLUSTER_COMPUTE_ZONE --project $GCP_PROJECT_ID
#    - template=`cat "deploy.yaml.template" | sed "s@{{REGISTRY_IMAGE}}@$REGISTRY_IMAGE@" | sed "s@{{REGISTRY_AUTH}}@$REGISTRY_AUTH@"`
#    - echo "$template" | kubectl apply -f -
